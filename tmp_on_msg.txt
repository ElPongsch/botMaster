        def on_msg(text: str, raw: dict):
            if not text:
                return
            stripped = text.strip()
            if not stripped:
                return

            if stripped.startswith('/'):
                parts = stripped.split()
                cmd = parts[0].lower()

                if cmd in ('/start', '/help'):
                    _send_help()
                    return

                if cmd == '/projects':
                    _send_projects(0)
                    return

                if cmd == '/agents':
                    running = manager.list_agents()
                    listing = storage.list_agents()
                    lines = ["Aktive Agent-IDs: " + (", ".join(map(str, running)) or '-')]
                    for a in listing[:10]:
                        lines.append(f"#{a['id']} {a['name']} [{a['status']}] -> {a.get('project_path') or '-'}")
                    tg.send_message("
".join(lines))
                    return

                if cmd == '/new':
                    if len(parts) == 1:
                        _send_projects(0)
                        return
                    proj_key = parts[1].lower()
                    name = " ".join(parts[2:]) if len(parts) > 2 else f"agent-{proj_key}"
                    project_path = str(projects.get(proj_key)) if proj_key in projects else None
                    try:
                        spec = manager.spawn(name=name, project_path=project_path)
                    except Exception as e:
                        tg.send_message(f"Fehler beim Start: {e}")
                        return
                    tg.send_message(
                        f"Agent #{spec.id} '{name}' gestartet. Projekt: {project_path or '-'}
"
                        f"Nutze '/to {spec.id} <text>' für Nachrichten."
                    )
                    return

                if cmd == '/stop' and len(parts) >= 2:
                    try:
                        aid = int(parts[1])
                    except ValueError:
                        tg.send_message('Ungültige Agent-ID')
                        return
                    ok = manager.stop(aid)
                    tg.send_message(f"Agent #{aid} {'gestoppt' if ok else 'nicht gefunden'}.")
                    return

                if cmd == '/to' and len(parts) >= 3:
                    try:
                        aid = int(parts[1])
                    except ValueError:
                        tg.send_message('Ungültige Agent-ID')
                        return
                    msg = " ".join(parts[2:])
                    if not manager.submit(aid, msg):
                        tg.send_message('Agent nicht gefunden.')
                    else:
                        tg.send_message(f"(an #{aid}) OK")
                    return

                tg.send_message('Unbekannter Befehl. /help für Übersicht.')
                return

            spec = get_base_agent()
            if not manager.submit(spec.id, text):
                tg.send_message('Basis-Agent nicht verfügbar.')
            else:
                tg.send_message(f"(an #{spec.id}) -> gesendet")

